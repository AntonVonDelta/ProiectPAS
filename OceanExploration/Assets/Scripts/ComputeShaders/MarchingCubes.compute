#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols 

#include "PerlinCompute.cginc"

struct Triangle {
	float3 p1;
	float3 p2;
	float3 p3;
};

static float3 cubeIndexes[] = {
	{ 0, 0, 1 },
	{ 1, 0, 1 },
	{ 1, 0, 0 },
	{ 0, 0, 0 },
	{ 0, 1, 1 },
	{ 1, 1, 1 },
	{ 1, 1, 0 },
	{ 0, 1, 0 }
};

static int2 edgeToVertexIndexes[] = {
	{ 0, 1 },
	{ 2, 1 },
	{ 2, 3 },
	{ 3, 0 },
	{ 4, 5 },
	{ 5, 6 },
	{ 6, 7 },
	{ 7, 4 },
	{ 0, 4 },
	{ 1, 5 },
	{ 2, 6 },
	{ 3, 7 },
};

Texture2D<int> facetsTable;
AppendStructuredBuffer<Triangle> triangleBuffer;
bool doInterpolate;
bool closeLateralSurface; // Whether to close the sides of the mesh
bool squishTerrain;
float surfaceValue;
float perlinNoiseScale;
float dotDistance;
uint3 dotsPerAxis;
float3 trianglePositionOffset;
float3 perlinPositionOffset; // Offset to be added to the vertex BEFORE multiplying it by perlinScale

float3 InterpolatePoints(float3 p1, float3 p2, float p1Value, float p2Value) {
	if (abs(p1Value - surfaceValue) < 0.00001f) {
		return p1;
	}
	if (abs(p2Value - surfaceValue) < 0.00001f) {
		return p2;
	}
	if (!doInterpolate) {
		return (p1 + p2) / 2;
	}
	if (p1Value < p2Value) {
		// Means p2 is inside the volume
		return p1 + mul((p2 - p1), 1.0f * clamp(surfaceValue - p1Value, 0, p2Value - p1Value) / (p2Value - p1Value));
	}
	
	// Means p1 is inside the volume
	return p2 + mul((p1 - p2), 1.0f * clamp(surfaceValue - p2Value, 0, p1Value - p2Value) / (p1Value - p2Value));
}

// Returns true if the point is on the outer surface
bool IsPointOnSurface(uint3 index) {
	// We want to cap off the structure even though the flag closeLateralSurface was set
	if (index.y == dotsPerAxis.y)
		return true;
	
	if (!closeLateralSurface)
		return false;
	
	if (index.y == 0)
		return true;
	if (index.z == 0)
		return true;
	if (index.x == 0)
		return true;

	if (index.z == dotsPerAxis.z)
		return true;
	
	if (index.x == dotsPerAxis.x)
		return true;
	return false;
}


[numthreads(8, 8, 8)]
void CSMain(uint3 executionId : SV_DispatchThreadID) {
	
	// Do not cross the boundaries
	if (any(executionId + uint3(1, 1, 1) > dotsPerAxis))
		return;
	
	float3 localSpacePos = mul(executionId, dotDistance);
	
	// Stores the random values for each corner
	float cornerValues[8];
	float3 cornerPosition[8];
	
	uint w;
	uint h;
	facetsTable.GetDimensions(w, h);
	Triangle t;
	t.p1 = float3(facetsTable.Load(int3(0, 0, 0)),0,0);
	t.p2 = float3(facetsTable.Load(int3(executionId.x, executionId.y, 0)), 0, 0);
	t.p3 = float3(w, h, 0);
	triangleBuffer.Append(t);
	return;
	
	////[unroll]
	//for (int i = 0; i < 8; i++) {
	//	cornerPosition[i] = mul((executionId + cubeIndexes[i]), dotDistance);
		
	//	//float squishFactor =lerp(1.0f, 0.0f, (cornerPosition[i].y - 0) / (dotsPerAxis.y * dotDistance - 0));
	//	//if (cornerPosition[i].y <= groundHeight) {
	//	//	cornerValues[i] = surfaceValue + 1;
	//	//	continue;
	//	//}
	//	//if (IsPointOnSurface(executionId + cubeIndexes[i])) {
	//	//	cornerValues[i] = surfaceValue - 1;
	//	//} else {
	//	//	cornerValues[i] = squishFactor*noise(mul(cornerPosition[i], perlinNoiseScale)); // / 2 + 0.5f;
	//	//}

		
	//	float squishFactor = squishTerrain * lerp(1.0f, 0.0f, (cornerPosition[i].y - (cornerPosition[i].y % 4) - 0) / (dotsPerAxis.y * dotDistance - 0)) + (1 - squishTerrain) * 1;
	//	bool onSurface = IsPointOnSurface(executionId + cubeIndexes[i]);
	//	cornerValues[i] = onSurface * (surfaceValue - 1) + (1 - onSurface) * squishFactor * noise(mul(perlinPositionOffset + cornerPosition[i], perlinNoiseScale));
		
	//	bool onGround = cornerPosition[i].y == 0;
	//	cornerValues[i] = onGround * (surfaceValue + 1) + (1 - onGround) * cornerValues[i];
	//}
	
	
 //   // Set the bits according to which vertex is inside the volume/surface
	//int edgeTableIndex = 0;
	
	////[unroll]
	//for (int j = 0; j < 8; j++) {
	//	edgeTableIndex += (cornerValues[j] > surfaceValue) * (1 << j);
	//}
	
	////Triangle tt;
	////tt.p1 = executionId;
	////tt.p2 = cornerPosition[0];
	////tt.p3 = float3(edgeTableIndex, surfaceValue, cornerValues[2]);
	////triangleBuffer.Append(tt);
	////return;
	
	//for (int k = 0; k < 15; k += 3) {
	//	if (facetsTable[edgeTableIndex][k] == -1)
	//		break;

	//	Triangle t;

	//	int edge0 = facetsTable[edgeTableIndex][k];
	//	int edge1 = facetsTable[edgeTableIndex][k + 1];
	//	int edge2 = facetsTable[edgeTableIndex][k + 2];
		
	//	t.p1 = trianglePositionOffset + InterpolatePoints(cornerPosition[edgeToVertexIndexes[edge0][0]], cornerPosition[edgeToVertexIndexes[edge0][1]],
	//							cornerValues[edgeToVertexIndexes[edge0][0]], cornerValues[edgeToVertexIndexes[edge0][1]]);
	//	t.p2 = trianglePositionOffset + InterpolatePoints(cornerPosition[edgeToVertexIndexes[edge1][0]], cornerPosition[edgeToVertexIndexes[edge1][1]],
	//							cornerValues[edgeToVertexIndexes[edge1][0]], cornerValues[edgeToVertexIndexes[edge1][1]]);
	//	t.p3 = trianglePositionOffset + InterpolatePoints(cornerPosition[edgeToVertexIndexes[edge2][0]], cornerPosition[edgeToVertexIndexes[edge2][1]],
	//							cornerValues[edgeToVertexIndexes[edge2][0]], cornerValues[edgeToVertexIndexes[edge2][1]]);
		
	//	triangleBuffer.Append(t);
	//}

}
